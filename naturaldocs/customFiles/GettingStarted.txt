Title: Getting Started

This tutorial introduces and steps though a simple program which used the CGP-Library to solve a symbolic regression task. Symbolic regression is the task of describing a series of data points using a mathematical equation. If you have not already downloaded and/or installed the CGP-Library please see the <Installation> tutorial. 

Title: The Program

A simple symbolic regression solving program used to illustrate the basic operation of the CGP-Library.

The program below is provided in the CGP-Library download within /examples/gettingStarted.c


(start code)
#include <stdio.h>
#include "../src/include/cgp.h"  

int main(void){

	struct parameters *params = NULL;
	struct dataSet *trainingData = NULL;
	struct chromosome *chromo = NULL;
		 
	int numInputs = 1;
	int numNodes = 15;
	int numOutputs = 1;
	int nodeArity = 2;
	
	int numGens = 10000;
	int updateFrequency = 500;  
	float targetFitness = 0.1;	
		
	params = initialiseParameters(numInputs, numNodes, numOutputs, nodeArity);
			
	addNodeFunction(params, "add,sub,mul,div,sin");
	
	setTargetFitness(params, targetFitness);
		
	setUpdateFrequency(params, updateFrequency);	
				
	printParameters(params);
	
	trainingData = initialiseDataFromFile("./examples/symbolic.data");
	
	chromo = runCGP(params, trainingData, numGens);	
			
	printChromosome(chromo);
	
	freeChromosome(chromo);		
	freeParameters(params);		
			
	return 1;
}
(end)


Title: Stepping Through the Code

A close look at each line of the example code.

In order to use the CGP-Library cgp.h must be included. The location of cgp.h and where your complier looks for it will depend upon your personal set up.

(begin code)
#include "../src/include/cgp.h"  
(end)

The CGP-Library leaves memory management up to the user so as to allow the user more control. Structures are used to to store information relating to various aspect of the CGP-Library; These structures must be defined by the user but are initialised and free'd using provided functions. The parameters structure contains general information related to the CGP-Library and is used to pass information into other functions without requiring a long series of inputs. The dataSet structure is used to store any data which may be needed when evaluating chromosome fitnesses. For instance in this example it shall be used to store the data points to which CGP must fit an equation. The chromosome structure is used to store all the information relating to a single CGP chromosome instance.  

(begin code)
struct parameters *params = NULL;
struct dataSet *trainingData = NULL;
struct chromosome *chromo = NULL;
(end)

Later we will need to know the dimensions so these are assigned to 
variables. The number of inputs are the number of chromosome inputs. 
The number of nodes is the maximum number of chromosome nodes. The 
number of outputs is the number of chromosome outputs. The arity is 
the arity of each chromosome node.

(begin code)
int numInputs = 1;
int numNodes = 15;
int numOutputs = 1;
int nodeArity = 2;
(end)

We will also later need to specify the number of generations or what 
fitness should be reached before terminating the search. We will also  how often to update the terminal with the 
current best fitness. The update frequency is in generations. 

(begin code)
int numGens = 10000;
int updateFrequency = 500; 
float targetFitness = 0.1;	 
(end)

Next the parameters structure is initialised with default parameters 
and the chromosome dimensions defined earlier. 

(begin code)
params = initialiseParameters(numInputs, numNodes, numOutputs, nodeArity);
(end)

One of the roles of the parameters is to store a function set 
containing the functions which each node can implement. Newly initialised 
parameters contain a empty function set and it is up to the user to 
populate it. The functions are added to the function set using 
addNodeFunction. 

(begin code)
addNodeFunction(params, "add,sub,mul,div,sin");
(end)

The default target fitness is '0' and is altered using 
setTargetFitness. 

(begin code)
setTargetFitness(params, 0.1);
(end)

The default update frequency is '1' and is altered using 
setUpdateFrequency.

(begin code)
setUpdateFrequency(params, updateFrequency);
(end)



(begin code)
printParameters(params);
(end)


>1,1,101,
>-5.000000,14400.000000,
>-4.900000,12712.338867,
>-4.800000,11191.950195,
>-4.700000,9825.367188,


