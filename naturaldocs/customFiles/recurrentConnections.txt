Title: Average Behaviour  

This tutorial introduces using the CGP-Library to create recurrent programs.

Recurrent programs are those which can contain feedback connections allowing CGP chromosomes to describe cyclic as well as acyclic graphs. The ability to describe cyclic programs allows CGP to be applied to partially observable tasks through the ablity to hold internal state information. Recurrent Cartesian Genetic Programming (RCGP) can create recurrent equations, boolean logic state machines and recurrent artificial neural networks.

This tutorial closely follows the <Getting Started> tutorial and it is recommended that you read that tutorial first.

Title: The Program

A simple program illustrating using CGP-Library to create recurrent equations.

The program below is provided in the CGP-Library download within /examples/recurrentConnections.c and is included in the code:blocks project. 

(begin code)
#include <stdio.h>
#include "../src/cgp.h"

int main(void){

	struct parameters *params = NULL;
	struct dataSet *trainingData = NULL;
	struct chromosome *chromo = NULL;

	int numInputs = 1;
	int numNodes = 15;
	int numOutputs = 1;
	int nodeArity = 2;
	
	int numGens = 100000;
	int updateFrequency = 500;
	
	double recurrentConnectionProbability = 0.10;

	params = initialiseParameters(numInputs, numNodes, numOutputs, nodeArity);

	addNodeFunction(params, "add,sub,mul,div");

	setUpdateFrequency(params, updateFrequency);

	setRecurrentConnectionProbability(params, recurrentConnectionProbability);

	printParameters(params);

	trainingData = initialiseDataSetFromFile("./dataSets/fibonacci.data");

	chromo = runCGP(params, trainingData, numGens);

	printChromosome(chromo, 0);

	freeDataSet(trainingData);
	freeChromosome(chromo);
	freeParameters(params);

	return 0;
}
(end code)

Title: Stepping Through the Code

A close look at the code.

The above code is very similar to gettingStarted.c seen in the <Getting Started> tutorial and shall not be explained again. Here the specifics relating to recurrent connections shall be highlighted. 

By default <initialiseParameters> returns a pointer to an initialised <parameters> structure with the recurrent connection probability set to zero. The recurrent connection probability stores the likelihood that when a connection gene is mutated it will create a recurrent connection. Where a recurrent connections connects a node of index i to a node of index j where j>=i. For instance a recurrent connection of 0.5 would cause mutations to create as many recurrent connections as feed forward. A recurrent connection probability of 0.1 would cause mutations to create recurrent connections 10% of the time and feed forward connections 90% of the time. Therefore the default recurrent connection probability of 0.0 results in no recurrent connections; standard acyclic CGP.

In order to use CGP to create cyclic/recurrent programs the recurrent connection probability value stored in the <parameters> must be altered. This is achieved using <setRecurrentConnectionProbability>.

(begin code)
double recurrentConnectionProbability = 0.10;
...
setRecurrentConnectionProbability(params, recurrentConnectionProbability);
(end)

Once the recurrent connection probability is set to a value >0 (and <=1) CGP-Library can now create recurrent/cyclic programs.


In this example Recurrent Cartesian Genetic Programming (RCGP) is used to create a recurrent equations which generates the Fibonacci sequence. Although the Fibonacci sequence does have a closed/explicit form it is much more easily defined recursively; making it a good application of RCGP.


For this example the function set will contain: addition, subtraction, multiplication and division.

(begin code)
addNodeFunction(params, "add,sub,mul,div");
(end code)

The Fibonacci dataset, given in /dataSets/fibonacci.data, is also loaded into a <dataSet> structure.

(begin code)
trainingData = initialiseDataSetFromFile("./dataSets/fibonacci.data");
(end code)

Since the recurrent connection probability has been set to a value greater than zero, recurrent programs can now be created using <runCGP> or <repeatCGP>; similarly to standard acyclic CGP. In this example <runCGP> is used.

(begin code)
chromo = runCGP(params, trainingData, numGens);
(end code)

After <runCGP> has finished the returned chromosome may describe a solution which contains recurrent connections. It only "may" use recurrent connections as even when the recurrent connection probability is set to a non-zero value, CGP can still produce standard feed forward programs. This is because the the recurrent connection probability only places a bias on mutations creating recurrent connections, it does not force the evolutionary process to make use of recurrent connections. This is true except in the case where the recurrent connection probability is set to 1.00 (100%) in which case the CGP chromosomes contain nothing but recurrent connections; although this would likely never be useful.   

The solution produced by <runCGP> is now printed to the terminal / command prompt.

(begin code)
printChromosome(chromo, 0);
(end code)

As can be seen from the displayed <chromosome>, it can sometimes be difficult to follow the logic of recurrent solutions. To help understand the operation of the produced solution some of the visualisation tools available within the CGP-Library can be used. For further information on how to use these tools see the <Visualisation> tutorial.



And that's it, by simply setting the recurrent connection probability parameter so a value greater than zero CGP-Library can be used to create recurrent programs.

