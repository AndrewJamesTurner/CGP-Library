Title: Multiple Threads   

This tutorial introduces and steps through a simple program which instructs the CGP-Library to use multiple threads.

One of the advantages of evolutionary algorithms is that they are "embarrassingly parallel". For instance the fitness of each member of a population can be calculated in parallel. Additionally when conducing multiple runs to assess <Average Behaviour> each individual run can be conducted in parallel. 

Title: The Program

A simple program which demonstrates using multiple threads with the CGP-Library. The program is also provided in the CGP-Library download within /examples/MultipleThreads.c and is included in the code::blocks project.

(start code)
#include <stdio.h>
#include <time.h>
#include "../src/cgp.h"

/*
	Custom fitness function which just does some work and returns 10.
*/
double fitnessFunction(struct parameters *params, struct chromosome *chromo, struct dataSet *data) {

	int i;
	double inputs[1] = {0.5};
	int numExec = 10000;

	for (i = 0; i < numExec; i++) {
		executeChromosome(chromo, inputs);
	}

	return 10;
}


int main(void) {

	time_t timeStart, timeEnd;
	double singleThreadTime, multipleThreadTime;
	double seedUp;

	struct parameters *params = NULL;

	int numInputs = 1;
	int numNodes = 100;
	int numOutputs = 1;
	int arity = 2;

	int gens = 100;
	int runs = 10;

	params = initialiseParameters(numInputs, numNodes, numOutputs, arity);
	setRandomNumberSeed(123456789);
	addNodeFunction(params, "add,sub,mul,div,sin");
	setMutationRate(params, 1.0);
	setCustomFitnessFunction(params, fitnessFunction, "FF");

	setNumThreads(params, 1);
	timeStart = time(NULL);
	repeatCGP(params, NULL, gens, runs);
	timeEnd = time(NULL);
	singleThreadTime = difftime(timeEnd, timeStart);

	setNumThreads(params, 4);
	timeStart = time(NULL);
	repeatCGP(params, NULL, gens, runs);
	timeEnd = time(NULL);
	multipleThreadTime = difftime(timeEnd, timeStart);

	seedUp = 100 * (singleThreadTime - multipleThreadTime) / multipleThreadTime;

	printf("Single thread time: %.f seconds\n", singleThreadTime);
	printf("Multiple thread time: %.f seconds\n", multipleThreadTime);
	printf("Speed up = %.f%%\n", seedUp);

	freeParameters(params);

	return 0;
}
(end)


Title: Stepping Through the Code

A close look at each line of the example code. First a number of header files are included including cgp.h for the CGP-Library and time.h so we can measure the speed up. 

(begin code)
#include <stdio.h>
#include <time.h>
#include "../src/cgp.h"
(end)



And that's it, 